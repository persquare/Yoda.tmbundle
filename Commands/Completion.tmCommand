<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python
# encoding: utf-8

"""
If completion is unambigous it will be inserted, otherwise
presents a popup of alternatives; continue typing to filter alternatives.

If used inside an empty function argument it will insert an argument template, use tab to advance selection.
"""

import os
import sys
import re

env = os.environ

envvars = ['TM_BUNDLE_SUPPORT', 'TM_SUPPORT_PATH']
sys.path[:0] = [os.environ[v]+b'/lib' for v in envvars if os.environ[v] not in sys.path]

import yoda

# Thread carefully here...
# If there is a selection, there will be no TM_SCOPE_LEFT, 
# no TM_LINE_NUMBER, TM_COLUMN_NUMBER, or TM_CURRENT_LINE, 
# but TM_SELECTED_TEXT and TM_SELECTION (with line and column) 
active_selection = 'TM_SELECTED_TEXT' in env
rs = env['TM_SCOPE']
ls = rs if active_selection else env['TM_SCOPE_LEFT']
mfca = "meta.function-call.arguments"
pda = "punctuation.definition.arguments"
# Need to examine scope more closely to determine if
# caret is between ( and ) in otherwise empty surrounding
in_empty_argument = pda in ls and pda in rs

# If there is an active selection inside ( and ) we likely want completion
if in_empty_argument:
    yoda.signature()
else:
    yoda.completion()

    </string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>~ </string>
	<key>name</key>
	<string>Completion</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>atCaret</string>
	<key>scope</key>
	<string>source.python</string>
	<key>uuid</key>
	<string>84EC377B-B92D-44E9-A027-3DB72A5FBDAF</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
